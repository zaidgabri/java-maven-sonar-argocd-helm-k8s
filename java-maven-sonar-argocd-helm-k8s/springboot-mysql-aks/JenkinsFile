pipeline {
    agent any

    environment {
        PATH = "${tool 'Maven'}/bin:${env.PATH}"
        registryName = 'algabrizaid/maven-opa-docker-agent'
        imageTag = "latest-${BUILD_NUMBER}"
        AZURE_DB_HOST = 'mysql-mysqlaksdemo.mysql.database.azure.com'
        AZURE_DB_NAME = 'demo'
        AZURE_DB_USERNAME = 'myadminuser'
        AZURE_DB_PASSWORD = 'zaid'
    }

    stages {
        stage('Build and Test') {
            steps {
                sh 'ls -ltr'
                sh 'cd java-maven-sonar-argocd-helm-k8s/springboot-mysql-aks && mvn clean package -Ddatabase.host=${AZURE_DB_HOST} -Ddatabase.name=${AZURE_DB_NAME} -Ddatabase.username=${AZURE_DB_USERNAME} -Ddatabase.password=${AZURE_DB_PASSWORD}'
            }
        }

        stage('Static Code Analysis') {
            environment {
                SONAR_URL = "http://52.149.213.148:9000"
            }
            steps {
                withCredentials([string(credentialsId: 'sonarqube', variable: 'SONAR_AUTH_TOKEN')]) {
                    sh 'cd java-maven-sonar-argocd-helm-k8s/springboot-mysql-aks && mvn sonar:sonar -Dsonar.login=$SONAR_AUTH_TOKEN -Dsonar.host.url=${SONAR_URL}'
                }
            }
        }

        stage('Build and Push Docker Image') {
            environment {
                DOCKER_IMAGE = "algabrizaid/maven-opa-docker-agent:${imageTag}"
                DOCKERFILE_LOCATION = "java-maven-sonar-argocd-helm-k8s/springboot-mysql-aks/Dockerfile"
                REGISTRY_CREDENTIALS = credentials('dockerhub')
            }
            steps {
                script {
                    sh 'cd java-maven-sonar-argocd-helm-k8s/springboot-mysql-aks && docker build -t ${DOCKER_IMAGE} .'
                    def dockerImage = docker.image("${DOCKER_IMAGE}")
                    docker.withRegistry('https://index.docker.io/v1/', "dockerhub") {
                        dockerImage.push()
                    }
                }
            }
        }

        stage('Update Deployment File') {
            environment {
                GIT_REPO_NAME = "java-maven-sonar-argocd-helm-k8s"
                GIT_USER_NAME = "zaidgabri"
            }
            steps {
                script {
                    def cloneDir = 'java-maven-sonar-argocd-helm-k8s'

                    if (!fileExists(cloneDir)) {
                        sh "git clone https://github.com/zaidgabri/java-maven-sonar-argocd-helm-k8s.git ${cloneDir}"
                    }

                    def manifestsDir = "${cloneDir}/spring-boot-app-manifests"
                    def newImageLine = "image: ${registryName}:${imageTag}"

                    sh "sed -i 's|image: algabrizaid/maven-opa-docker-agent:latest.*|${newImageLine}|' ${manifestsDir}/deployment-mysql.yml"

                    withCredentials([usernamePassword(credentialsId: 'git',passwordVariable: 'GIT_PASSWORD' , usernameVariable: 'GIT_USERNAME')]) {
                        dir(cloneDir) {
                            sh "git config user.email zaidgabri976@gmail.com"
                            sh "git config user.name zaidgabri"
                            sh "git add ."
                            sh "git commit -m 'Update image tag in Kubernetes manifests'"
                            sh "git push https://${GIT_USERNAME}:${GIT_PASSWORD}@github.com/zaidgabri/java-maven-sonar-argocd-helm-k8s.git HEAD:main"
                        }
                    }
                    sh "rm -rf ${cloneDir}"
                }
            }
        }
    }
}
